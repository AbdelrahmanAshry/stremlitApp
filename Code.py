# -*- coding: utf-8 -*-
"""Deploy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c0cGQjsEF7TAPu_XSIvrWC3iqHzL-6cA

Importing Libraries
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import DataLoader, random_split
from torchvision import transforms
from torchvision.datasets import ImageFolder
import torchvision.models as models
import os

"""# DATA Pre-processing"""

from google.colab import drive
drive.mount('/content/drive')

# Set the path to the dataset
dataset_path = '/content/drive/My Drive/Teeth_Dataset2'

# Calculate the mean and standard deviation of the dataset
def calculate_mean_std(dataset):
    loader = DataLoader(dataset, batch_size=64, shuffle=False, num_workers=2)
    mean = 0.0
    std = 0.0
    for images, _ in loader:
        batch_samples = images.size(0)  # batch size (the last batch can have smaller size)
        images = images.view(batch_samples, images.size(1), -1)
        mean += images.mean(2).sum(0)
        std += images.std(2).sum(0)
    mean /= len(loader.dataset)
    std /= len(loader.dataset)
    return mean, std

# Initial transformation to calculate mean and std
initial_transform = transforms.Compose([
    transforms.Resize((64, 64)),
    transforms.ToTensor()
])

# Load the dataset initially to calculate mean and std
dataset = ImageFolder(root=dataset_path, transform=initial_transform)
mean, std = calculate_mean_std(dataset)

data_transforms = {
    'train': transforms.Compose([
        transforms.Resize((256, 256)),  # Resize to a fixed size
        transforms.RandomHorizontalFlip(),  # Random horizontal flip
        transforms.RandomRotation(20),
        transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  # Normalize to ImageNet standards
    ]),
    'val': transforms.Compose([
        transforms.Resize((256, 256)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ]),
}
# Data is splitted by folders
# Load the dataset with the final transform
train_dataset=ImageFolder(root=dataset_path + '/Training', transform=data_transforms['train'])
val_dataset=ImageFolder(root=dataset_path + '/Validation', transform=data_transforms['val'])
test_dataset=ImageFolder(root=dataset_path + '/Testing', transform=data_transforms['val'])
# Assuming 'test_dataset' contains your original test data
subset_indices = [i for i in range(len(test_dataset)) if test_dataset.imgs[i][1] < 7]
subset_dataset = torch.utils.data.Subset(test_dataset, subset_indices)

# Create a new DataLoader for the subset
#subset_test_loader = DataLoader(subset_dataset, batch_size=64, shuffle=False, num_workers=-1)
# Create DataLoaders for each split
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True, num_workers=2)
val_loader = DataLoader(val_dataset, batch_size=64, shuffle=False, num_workers=2)
test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False, num_workers=2)

# Example: Print dataset sizes
print(f'Training size: {len(train_loader.dataset)}')
print(f'Validation size: {len(val_loader.dataset)}')
print(f'Test size: {len(test_loader.dataset)}')

# Assuming 'test_dataset' contains your original test data
subset_indices = [i for i in range(len(test_dataset)) if test_dataset.imgs[i][1] < 7]
subset_dataset = torch.utils.data.Subset(test_dataset, subset_indices)

# Create a new DataLoader for the subset
subset_test_loader = DataLoader(subset_dataset, batch_size=64, shuffle=False, num_workers=2)

"""# Model Architecture

class DenseBlock(nn.Module):
    def __init__(self, in_channels, growth_rate, num_layers):
        super(DenseBlock, self).__init__()
        self.layers = nn.ModuleList()
        for i in range(num_layers):
            self.layers.append(self._make_layer(in_channels + i * growth_rate, growth_rate))

    def _make_layer(self, in_channels, growth_rate):
        return nn.Sequential(
            nn.BatchNorm2d(in_channels),
            nn.ReLU(inplace=True),
            nn.Conv2d(in_channels, growth_rate, kernel_size=3, padding=1, bias=False)
        )

    def forward(self, x):
        for layer in self.layers:
            out = layer(x)
            x = torch.cat([x, out], 1)
        return x

class TransitionLayer(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(TransitionLayer, self).__init__()
        self.layer = nn.Sequential(
            nn.BatchNorm2d(in_channels),
            nn.ReLU(inplace=True),
            nn.Conv2d(in_channels, out_channels, kernel_size=1, bias=False),
            nn.AvgPool2d(kernel_size=2, stride=2)
        )

    def forward(self, x):
        return self.layer(x)

class SimpleDenseNet(nn.Module):
    def __init__(self, num_classes=7):
        super(SimpleDenseNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)
        self.pool1 = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)

        self.block1 = DenseBlock(64, growth_rate=32, num_layers=4)
        self.trans1 = TransitionLayer(192, 96)

        self.block2 = DenseBlock(96, growth_rate=32, num_layers=4)
        self.trans2 = TransitionLayer(224, 112)

        self.block3 = DenseBlock(112, growth_rate=32, num_layers=4)
        self.trans3 = TransitionLayer(240, 120)

        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(120, num_classes)

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.pool1(x)

        x = self.block1(x)
        x = self.trans1(x)

        x = self.block2(x)
        x = self.trans2(x)

        x = self.block3(x)
        x = self.trans3(x)

        x = self.avgpool(x)
        x = torch.flatten(x, 1)
        x = self.fc(x)

        return x

Training model on the data sets

# Train model
"""

from torchvision.models import resnet50, ResNet50_Weights
# Initialize model
weights = ResNet50_Weights.DEFAULT
#load a pre trained model
unoptmodel = models.resnet50(weights=weights)
# Modify the final layer for 7 classes
num_ftrs = unoptmodel.fc.in_features
unoptmodel.fc = nn.Linear(num_ftrs, 7)
# Initialize the model
#unoptmodel = SimpleDenseNet(num_classes=7)
# Print the model summary
print(unoptmodel)
# Move model to GPU if available
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
unoptmodel = unoptmodel.to(device)

# Define loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.AdamW(unoptmodel.parameters(), lr=1e-4)
model=torch.compile(unoptmodel, mode="reduce-overhead")

# Training and validation loop
num_epochs = 10
best_val_loss = float('inf')

for epoch in range(num_epochs):
    # Training phase
    model.train()
    train_loss = 0.0
    correct = 0
    total = 0

    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        train_loss += loss.item() * images.size(0)
        _, predicted = torch.max(outputs, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

    train_loss /= len(train_loader.dataset)  # Average loss per sample
    train_accuracy = 100. * correct / total

    # Validation phase
    model.eval()
    val_loss = 0.0
    correct = 0
    total = 0

    with torch.no_grad():
        for images, labels in val_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            loss = criterion(outputs, labels)
            val_loss += loss.item() * images.size(0)
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    val_loss /= len(val_loader.dataset)  # Average loss per sample
    val_accuracy = 100. * correct / total

    print(f'Epoch {epoch+1}/{num_epochs}, '
          f'Train Loss: {train_loss:.4f}, Train Accuracy: {train_accuracy:.2f}%, '
          f'Validation Loss: {val_loss:.4f}, Validation Accuracy: {val_accuracy:.2f}%')

    # Save the model if the validation loss decreases
    if val_loss < best_val_loss:
        best_val_loss = val_loss
        torch.save(model.state_dict(), 'model.pth')
        print(f'Model saved with validation loss: {val_loss:.4f}')

"""Test result"""

# Testing the model
model.eval()
test_loss = 0.0
correct = 0
total = 0
with torch.no_grad():
    for images, labels in subset_test_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        loss = criterion(outputs, labels)
        test_loss += loss.item()
        _, predicted = outputs.max(1)
        total += labels.size(0)
        correct += predicted.eq(labels).sum().item()

test_loss /= len(subset_test_loader)
test_accuracy = 100. * correct / total

print(f'Test Loss: {test_loss:.4f}, Test Accuracy: {test_accuracy:.2f}%')

"""#Deploy App streamlit"""

#pip install streamlit
import streamlit as st
from PIL import Image
# Save the model
torch.save(model.state_dict(), 'model.pth')

# Load the model for inference
model.load_state_dict(torch.load('model.pth'))
model.eval()


# Streamlit app
st.title("Image Classification")
uploaded_file = st.file_uploader("Choose an image...", type="jpg")
# Progress bar
progress_bar = st.progress(0)

if uploaded_file is not None:
    # Load the image
    image = Image.open(uploaded_file)
    st.image(image, caption='Uploaded Image', use_column_width=True)
    st.write("")
    st.write("Classifying...")

    # Preprocess the image
    image = data_transforms['val'](image).unsqueeze(0).to(device)  # Add batch dimension

    # Make prediction
    with torch.no_grad():
        output = model(image)
        _, predicted = torch.max(output, 1)

    # Map the output to class names (you need to define these according to your dataset)
    class_names = ['CaS', 'CoS 2', 'Gum', 'MC', 'OC', 'OLP', 'OT']
    st.write(f'Prediction: {class_names[predicted.item()]}')